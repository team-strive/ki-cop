Ja, einfach machen würde ich sagen. Das hat mich, mich hat es am Anfang so ein bisschen abgeschreckt, so hm, jetzt kommt mein Code da irgendwie, trifft er da irgendwo auf, wo es benutzt wird und dann kracht es und um Gottes willen und so. Aber eigentlich schauen wirklich sehr viele Menschen da drauf und es gibt ganz gute Testprozesse und so weiter und so fort. Einfach machen und versuchen mal das, was einen interessiert, wo das Herz so einen kleinen Hüpfer macht, mal angehen und gucken, dass man reinfindet. Also bei mir war jetzt zum Beispiel, war es jetzt konkret, dass ich An einer Library, die ich benutzt habe, habe ich ein oder zwei Fehler festgestellt, habe dann die Fehler selber gelöst und habe das dann kommuniziert und dann kam sofort die Rückmeldung, ja, coole Idee, finden wir gut, machen wir so und dann so kommt man da rein.



Hallo und willkommen zurück bei Schwarz-Rot-Gold, Deutschland Entwicklungsland. Ich bin Jürgen Kraus und ich möchte mit euch heute abtauchen in das Thema Open Source in Deutschland. Und macht euch mal den Spaß, fahrt mal den Rechner hoch, schaut mal die Programme an, die ihr jeden Tag benutzt und schaut mal wirklich ganz genau hin. Vielleicht auch mal einen Blick in die Lizenzbedingungen werfen auf die Webseite der Hersteller und mal gucken, wo überall Open Source draufsteht und drin ist. Und dann überlegt mal, wie euer Leben, euer digitales Leben, vielleicht auch euer Arbeitsleben aussähe, wenn es keine Open-Source-Software gäbe. Also ich meine, es gäbe wahrscheinlich kein Internet, zumindest nicht in dieser Form. Diesen Podcast gäbe es nicht in dieser Form. Er würde mindestens mal viel, viel schlechter klingen. Es gäbe viele Unternehmen nicht. Es gäbe viele Jobs nicht. Heute tatsächlich Open Source Software ist sehr, sehr omnipräsent und eigentlich war das schon die ganze Zeit so. Angefangen in den 50er, 60er Jahren wurde schon von Akademikern Software für die großen Computer an den Universitäten geschrieben und auch die wurden unter einem offenen Quellcode, die wurden offen geteilt, offen weitergegeben. Also auch da war eigentlich Open Source schon sehr, sehr präsent. Ist dann ein bisschen, zumindest in meiner Wahrnehmung, wie ich mit Computern in Kontakt gekommen bin und meine ersten Jahre mit Computern, da war Open Source mir natürlich kein Begriff, aber wir haben natürlich Software geteilt. Also gerade, ich sag mal, Kopierschutz war ein sehr, sehr präsentes Thema und der Umgang mit was darf ich, was darf ich nicht, war uns zwar damals überhaupt nicht klar, was erlaubt ist und was nicht, aber wir waren eigentlich schon mittendrin in dieser Diskussion. Von daher freue ich mich heute sehr auf das Thema Open Source und ich habe einen ganz ganz tollen Gesprächspartner gefunden, deswegen werden wir heute auch längere Gesprächspassagen mal im Podcast haben. Sagt mir gerne, wie ihr das findet. Ich habe mich unterhalten mit Cornelius Schumacher, der ist Open Source Steward bei einer Tochter der Deutschen Bahn. Und was dieser Beruf überhaupt bedeutet, war mir vor dem Gespräch nicht klar. Darauf werden wir eingehen. Wir werden aber auch den Blick einmal einige Jahre und Jahrzehnte zurückwerfen. Wir werden gucken, was ist damals bei Suse hier in Nürnberg vor meiner Haustür? Was ist damals passiert? Wie hat es hier alles seinen Anfang genommen oder wie hat es sich entwickelt? Ich meine Open Source geht ja schon eine ganze Weile länger zurück. Wir werden aber auch den Blick weiten und wir werden gucken, wie sieht es in Deutschland aus, wie sieht es in den Ländern um uns herum aus, wie sieht es nicht nur in Open-Source-Software-Themen aus, sondern wie überträgt sich der Open-Source-Gedanke auch auf andere angeschlossene Themengebiete. Das wird mit Sicherheit eine sehr, sehr volle, sehr, sehr spannende Episode. Also verlieren wir keine Zeit und springen direkt rein. Die Einstiegsfrage ist ja immer super wichtig. Jetzt habe ich so ein bisschen überlegt, was ich mit Open Source verbinde. Und wenn jemand, wie ich auch schon eine Weile, irgendwie mit Software und mit Computern unterwegs ist, hat er da ja auch schon einiges gesehen. Und ich habe dann so irgendwie für mich festgestellt, ich habe ein bestimmtes Bild von Open Source im Kopf. Und das ist, wahrscheinlich haben das viele, wenn sie an Open Source denken, ist es erst mal sowas wie Das sieht so kompliziert aus, das ist hässlich, das ist langsam. Und da habe ich mich gefragt, hat Open Source ein Imageproblem oder sind wir da heute eigentlich schon viel weiter?


Das ist eine super spannende Frage. Ich glaube, dass wir sehr viel weiter sind. Ich glaube, dass Open Source ein Imageproblem, würde ich nicht sagen. Ich glaube, es gibt aber ganz viele Sichten auf Open Source. Und es gibt auch ganz viele Sichten, die sich über die Zeit entwickelt haben. Ich glaube, dass so die Open-Source-Pioniere, die angefangen haben mit Open-Source und damals wirklich noch dafür kämpfen mussten und die Technik natürlich auch nicht so gut war und wo dann vielleicht wirklich diese schrecklich hässlich aussehenden Anwendungen irgendwie rauskamen, die aber halt frei waren. Ich glaube, dass die natürlich schon so ein Bild prägen. Manchmal ist das auch, glaube ich, so im eigenen Kopf noch. Also ich habe manchmal so, wenn ich über Open Source ganz abstrakt nachdenke oder irgendwie Vorträge mache, wo ich Bilder irgendwie dafür brauche, gerade wenn ich so ein bisschen an die Geschichte denke, lege ich dann oft gerne so ein Bild von einer Linux-Distribution irgendwie aus den 90ern auf. Und das sieht natürlich wie Kraut und Rüben aus. Und da hat sich aber natürlich irrsinnig viel getan. Also wenn man diese Bilder von den Linux-Distributionen auflegt, dann fragt man sich immer, wer hat da von wem kopiert. Kopiert der Mac jetzt von Linux oder Windows von Linux oder umgekehrt? Also da gibt sich das alles nicht mehr viel. Und ich glaube, dass Open Source inzwischen auch durch diese Selbstverständlichkeit, die ja inzwischen erreicht ist und diese irrsinnige Verbreitung, dass man eigentlich gar nicht mehr so genau zuordnen kann, was eigentlich Open Source ist und was nicht Open Source ist, weil Open Source überall drin steckt. Und damit, also wenn es Imageprobleme gibt, dann hängen die glaube ich inzwischen in den wenigsten Fällen daran, ob irgendetwas Open Source ist oder nicht, sondern eigentlich an anderen Faktoren, die natürlich bei jeder Software oder bei jedem Produkt irgendwie dann auch eine Rolle spielen.


Ja, ich glaube, das müssen wir dann auch nochmal ein bisschen genauer auseinanderklamüsern, weil wie du schon sagst, man kann das heute ja ganz schwer überhaupt aus irgendwelchen Projekten rauslösen oder gesondert betrachten, weil es ist einfach überall schon mit drin. Aber vielleicht kann man trotzdem den Stand heute einmal versuchen zu bewerten. Warum glaubst du, dass Menschen heute so viel Open Source Software nutzen? Ist es eher, weil es umsonst ist? Ist es, weil die Funktionalität besser ist? Oder hat es dann doch was mit bestimmten Werten und Ideologien zu tun?


Ich glaube, in der Breite hat es viel weniger mit Werten zu tun, als vielleicht manchem lieb wäre. Ich glaube, dass ganz viel aus der Praxis kommt. Natürlich über die Zeit, wenn man sich die großen Open-Source-Projekte anschaut, wenn man sich jetzt ein Linux anschaut, das hat inzwischen Jahrzehnte auf dem Buckel, sage ich mal. Und natürlich ist in der Zeit ganz viel passiert und die Technik ist erwachsener geworden und stabiler geworden. Insgesamt der Umgang auch damit ist professioneller geworden. Es gibt natürlich auch die Projekte, die innerhalb von ziemlich kurzer Zeit irgendwie da viel erreichen, aber insgesamt denke ich, ist alles viel weiterentwickelt. Und das ist natürlich so ein Faktor, der jetzt technisch eine Rolle spielt, der aber auch von der Kultur eine Rolle spielt. Viele Menschen, die heute Open Source machen, kennen ja diese Zeit des Kampfes für die Freiheit gar nicht mehr, sondern die sind einfach mit dabei, weil sie Software installiert haben und vielleicht Software von Microsoft installiert haben oder von sonst irgendjemand, der vor vielen Jahren Open Source nicht mit der Kneifzange angefasst hätte. Und dadurch denke ich, ist so die Bandbreite von Motivation viel näher an dem, was einfach so das Spektrum von Motivation überhaupt ausmacht. Und dieser Idealismus, denke ich, ist immer noch da. Man findet immer noch unheimlich viele begeisterte Leute. Und das ist ja auch das Schöne irgendwie, dass sich da ein bisschen von dieser Begeisterung auch so in die Firmen, die jetzt auch ganz viel mit Open Source dann einfach aus wirtschaftlichen Gründen machen, da durchaus irgendwie auch mit reingetragen hat. Da denke ich, ist Ja, also einiges vorhanden, aber insgesamt denke ich, findet man einfach alle Motivationen. Und es gibt natürlich eine ganz starke wirtschaftliche Motivation. Das ist jetzt weniger der Preis, dass ich nicht Geld bezahlen muss für eine Open-Source-Lizenz, sondern dass viele Firmen einfach verstanden haben, wie das Open-Source-Modell funktioniert und dass wir sich nutzen und damit einfach die Effizienzgewinne, die dadurch kommen, Unabhängigkeit, die dadurch kommt, die Kontrolle, die man dann über die eigene Infrastruktur oder über die eigenen Produkte hat, dass sie einfach diese Vorteile inzwischen, ja, souverän nutzen können. Und damit geht es dann auch wieder, das ist vielleicht so ein bisschen ein Thema irgendwie von meiner Antwort, geht das alles so ein bisschen in die Normalität über, wo man dann gar nicht mehr so fragt, ist es Open Source oder nicht, sondern eigentlich, ja, die Fragen stellt, erfüllt es meine Anforderungen oder Kann ich da gut entwickeln? Oder wer macht das eigentlich? Oder was man sonst so für Fragen stellen würde.


Ja, du hast es gerade angedeutet, dass sich das seit Dekaden ja schon entwickelt, das ganze Thema, und sich auch ganz, ganz stark verändert hat. Und keine Sorge, ich will jetzt nicht einen kompletten geschichtlichen Abriss mit dir durchgehen. Ich meine, du warst 16 Jahre lang bei SUSE, du warst 10 Jahre davor auch im KDE e.V. Du bist ja schon wahnsinnig lange in diesem Feld unterwegs. Und das waren ja noch nicht einmal die Anfangsjahre. Also da ist ja auch schon vorher viel passiert. Aber kannst du mir vielleicht ein bisschen was aus deiner Zeit hier am Anfang gerade bei SUSE zum Beispiel erzählen, wie du da hingekommen bist, wie da so die Stimmung war und vor allem interessiert mich auch, wie ihr euch damals die Zukunft vorgestellt habt.


Ich fange mal noch ein bisschen früher an, Vorsuse. Ich habe meinen ersten Patch in einem Open-Source-Projekt 1999 gemacht. Da war das erste Mal, dass ich Open-Source-Code bewusst geschrieben habe. Und das war damals im KDE-Projekt. Damit war ich auch nicht bei den allerersten Menschen, die im Projekt aktiv waren, dabei, sondern so ein bisschen die zweite Welle. KDE ist ja schon 1996 entstanden und ich hatte damals natürlich keine Ahnung von nix und wollte aber gerne irgendwie mal das ausprobieren und hab dann in K-Organizer, der Kalenderapplikation von KDE, mal den Code ausgecheckt und wollte da mal ein bisschen mit rumspielen. Und die war total kaputt und ist gecrasht irgendwie, bevor sie gestartet ist. Und dann habe ich erst mal diesen Bug gefixt und dann eine E-Mail geschickt an eine E-Mail-Adresse, die ich irgendwo gefunden habe. Ich habe hier einen Bug gefunden und ihr müsst irgendwie in Zeile 37 irgendwie das gleich zu einem Ungleich machen oder was auch immer da die Lösung war.


War das damals der gängige Weg, um einen Bugfix zu committen?


Das war mein gängiger Weg. Ich hatte damals noch nicht verstanden, was Versionskontrollsysteme sind und wie man das Patchkommando bedient und so weiter und so fort. Also insgesamt gab es da natürlich schon mehr. Ich meine, das war alles noch ein bisschen rudimentärer, noch nicht auf diesem komfortablen Niveau, wo wir heute sind, wo man einfach im User Interface dann alles irgendwie gezeigt bekommt, was man machen muss. Aber das war auch meine eigene Lernkurve, die ich da erst noch durchmachen musste. Und ja, so bin ich dann auch reingekommen. Und das Coole war dann, dass ich natürlich da auch dann Reaktionen gekriegt habe und so weiter und so fort. Und dann haben mir Leute erklärt irgendwie, wie man es richtig macht. Und ich habe dann relativ schnell ziemlich viel gelernt an der Stelle. ... und war dann total, ... ... es hat mich total in dieses Projekt reingesaugt. Und das war damals so mein Hobby. Ich habe damals an der Uni gearbeitet ... ... und dort haben wir auch ... ... Software eingesetzt, ... ... die KDE auch eingesetzt hat. Also auch da ... ... habe ich mit dem Qt Toolkit gearbeitet ... ... und da dachte ich mir eben, ... ... da spiele ich mal ein bisschen mehr damit rum ... ... und das ist dann so ... ... ja zu einem sehr, sehr intensiven Seitenprojekt geworden, ... ... was mich eigentlich bis heute begleitet. ... in natürlich vielfältiger Ausprägung, ... ... ganz unterschiedlichen Sachen. Und ich bin dann ... ... zu Suse bin ich gekommen, ... ... das war so mein zweiter Schritt nach der Uni, ... ... mein erster Schritt war bei Caldera ... ... in Erlangen. Damals habe ich dort angefangen ... ... als Softwareentwickler ... ... und da bin ich witzigerweise reingekommen, weil ... ... einer von den Leuten bei Caldera ... ... den Organizer genutzt hat ... ... und der dann mir immer Bug-Reports geschickt hat. Und die habe ich dann gefixt und war mit dem auch in Kontakt und so und da sind wir so ins Gespräch gekommen und das hat sich dann irgendwann ergeben und ich bin nach Erlangen gefahren und war dann ja in der Linux-Industrie gelandet. Und das ist dann irgendwann zu SUSE übergegangen. Wir haben dann dort, ja bei SUSE habe ich auch ganz viele, viele verschiedene Sachen gemacht, hab ja mit Entwicklung in verschiedenen Bereichen angefangen, hab dann später auch in, Teams geleitet und so, aber war halt immer in dieser Open-Source-Welt und habe auch diese Nebenwelt mit dem privaten Projekt, wo man nebenbei dann da noch Zeit reinsteckt, habe ich nie aufgegeben. Das ist teilweise dann so ein bisschen fließend ineinander übergegangen, wie ich jetzt beruflich da agiert habe und wie ich privat agiert habe. Und für mich war das ein unheimlicher Lernfaktor auch. Also da konnte ich so viel lernen über den Code am Anfang, wie ich Versionskontrollsysteme benutze, aber auch später dann. Als ich dann im KDE Projekt in den Verein gegangen bin, in den Vorstand gewählt wurde, da habe ich dann plötzlich wieder ganz andere Sachen gelernt, wie man Buchhaltung macht als Schatzmeister eines Vereins oder wie man dann mit Open Source Lizenzen umgeht und diese rechtlichen Fragen und so weiter. Also eine wahnsinnige Lernumgebung, die Open Source da bietet und im Endeffekt hat die auch so meine Karriere befeuert. Also ich wäre nicht da, wo ich jetzt bin, wenn ich nicht 1999 diesen Patch gemacht hätte.


Das ist ein Weg, um ins Thema Open Source rein zu gelangen. Und ich frage mich aber, ob das der Standardweg ist. Und weil mich Fragen blöd ist, weil ich kein Entwickler bin, habe ich mich im Haus mal umgehört. Und ich bin bei meinem Kollegen Oliver Marienfeld gelandet, der auch sich in dem Thema Open Source ein bisschen tummelt, noch nicht ganz so lange dabei ist, aber das total spannend für sich entdeckt gerade. Und den habe ich auch gefragt, wie sein Weg bis hier aussah.


Ja, also Ich war schon seit vielen Jahren ganz fleißig darin, Dinge, die mir so aufgefallen sind, in Open-Source-Projekten auch zu melden, also über die Jira oder irgendwelche Boards oder auch im Chat dann mit den Open-Source-Entwicklern. Und irgendwann habe ich mir dann gedacht, das kannst du doch auch selber lösen. Also bei dem einen oder anderen Problem fällt es einem einfach an. Und seit es GitHub gibt, ist es einfach nochmal viel einfacher. Da löst du das Problem einfach selber, stellst den Pull-Request ein und der Maintainer, der sagt dann grün oder nicht grün und dann wird es übernommen und dann bist du schon dabei.


Also ein super Ansatz, um Zugang zum Thema Open Source zu finden, ist wohl, sich einfach die Software anzuschauen, die man sowieso gerne benutzt und sich zu überlegen, hey, gibt es irgendwie eine Stelle, die nicht funktioniert, die man verbessern kann, wo ich vielleicht allein schon durch mein Feedback einen Beitrag leisten kann oder wo ich vielleicht sogar Bock hätte, mir mal den Code anzuschauen und mich mit Verbesserungen auseinanderzusetzen. Und von daraus geht es dann irgendwie weiter. Das bringt einen Stein ins Rollen. Und bei ganz vielen Leuten führt das am Ende dazu, dass sie irgendwie Teil von einem größeren Netzwerk werden oder dass sie sogar beruflich in diese Schiene irgendwie mit reinrutschen, mit reinkommen. Also diese Idee, dass Open Source A natürlich ein Stück weit Ausbildung ist für Programmierende. Das hatte ich so überhaupt noch nicht auf dem Schirm. Aber dass das natürlich auch für viele ein Startpunkt einer Karriere sein kann und ist, das ist doch bemerkenswert. Und was für mich eine neue Erkenntnis und total spannend ist, ist, dass das heutzutage überhaupt kein Entweder-oder sein muss. Also ich muss nicht entweder Open-Source-Entwickler oder kommerziell beschäftigt sein. Es gab 2012 eine Untersuchung der Linux Foundation, die haben eine Studie angefertigt und herausgefunden, dass 75 Prozent der Beiträge zum Linux Kernel während der Arbeitszeit entstehen. Und es gab noch eine unabhängige Studie ein paar Jahre später, die kommen zu dem Schluss, dass 50 Prozent der Kontributionen zwischen 9 und 17 Uhr gemacht werden, also auch zu typischen Arbeitszeiten, was natürlich jetzt an sich noch nicht wahnsinnig viel aussagt, aber wenn man bedenkt, dass Entwicklende gerne auch nicht zu klassischen Arbeitszeiten, sondern irgendwie spätabends, nachts sogar vielleicht arbeiten, auch kommerziell arbeiten, ist dieser Wert von 50 Prozent wahrscheinlich eher so die untere Grenze. Open Source kann also nicht nur als Karriere Sprungbrett gut funktionieren, sondern einfach auch während einer beruflichen Laufbahn immer wieder auch Thema sein oder langfristig noch Thema sein. Was ich da so mitnehme, ist, dass es heute für angehende Entwicklerinnen und Entwickler einfach unabdingbar ist, sich mit dem Thema auseinanderzusetzen, sich in solche Projekte vielleicht einzuklingen und sich da auch so ein Stück weit Reputation zu verdienen und Sporen zu verdienen. Und da darf man sich auch nicht frustrieren lassen, wenn man da jetzt nicht irgendwie sofort einen Zugang findet. Ich habe noch eine Studie gefunden, da haben Wissenschaftler die Software Repositories bei OpenStack analysiert und haben festgestellt, dass 80 Prozent der Commits von acht Prozent der Autorinnen und Autoren gemacht werden. Also das ist eigentlich der der Teil derer, die wirklich aktiv zu einem Projekt beitragen, indem sie Software entwickeln und weiterschreiben, dass der relativ klein ist. Aber die Frage ist doch überhaupt, ob man zwangsläufig Softwareentwicklerin oder Softwareentwickler sein muss, um an einem Open-Source-Projekt mitzumachen.


Also nein, glaube ich nicht. Softwareentwicklung ist natürlich der zentrale Bestandteil, sonst gäbe es die Produkte ja nicht, so wie sie sind, oder die Open-Source-Projekte. Es gibt aber noch andere Möglichkeiten, da einzusteigen. Also ganz oft werden Übersetzungen gebraucht. Wenn man jetzt verschiedene Sprachen kann, dann je exotischer, desto wichtiger ist man ja dann sofort schon. eine andere Möglichkeit ist, irgendwas grafisch zu machen mit Designs oder Texte schreiben, Dokumentation, Userguides. Also es gibt einen Haufen zu tun und meistens mehr Arbeit als Leute, die es machen.


Also am besten keine Scheu, auch wenn man sich mit seinen Entwicklerfähigkeiten vielleicht noch nicht so sicher ist, kann man sich trotzdem in dem Umfeld mal so ein bisschen ausprobieren, sich da mal reinknien. Man sollte da wirklich keine Berührungsängste haben. Es gibt da vielfältigen Zugang dazu. Und warum das lohnenswert sein kann, das erfahre ich als Antwort auf die Frage. Vorhin habe ich Cornelius gefragt, ob er glaubt, dass die Mehrheit der Open Source Beitragenden, ob die das aus idealistischen Gründen tun oder eher aus technischen Gründen oder aus welchen Gründen auch immer. Und ich habe die Frage nochmal wiederholt, aber auf ihn bezogen. Also ich wollte wissen, ob er sich da reinhängt, weil er an diese Idee glaubt, an den Freiheitsgedanken oder ob es für ihn wirklich eher die Technik und das Programmieren ist.


Also ich muss sagen, die Technik hat mich in das Projekt gezogen. Das war das, was mich erstmal interessiert hat, weil ich wollte einfach mal schauen, wie kann man so programmieren und fand es halt super attraktiv. Ich hatte auch früher schon, bevor ich das Konzept Open Source irgendwie verstanden hatte, programmiert und hab dann Shareware benutzt und so weiter. Und das Tolle an Open Source und in dem Fall gerade an KDE war halt, dass ich einfach den Code selber auschecken konnte und den selber ändern konnte. Also so dieses Experimentierfeld, was sich da geboten hat, das hat mich total gereizt. Und die dann darauf aufbauen, natürlich damit mehr zu machen und dann auch die Leute da kennenzulernen, das war dann so das, was mich eigentlich zum zum Bleiben veranlasst hat. Also ich sage oft so gerne die, ich bin für die Technik gekommen, aber wegen der Community geblieben, weil es dann auch Am Anfang habe ich die Leute natürlich alle nicht gekannt und wir haben nur über E-Mail kommuniziert oder vielleicht über IRC, über Chat. Und ich habe dann aber bei, damals waren das so die Linux-Messen, die stattgefunden haben, so der Linux-Tag oder auch andere von den Messen, wo dann wirklich damals wahnsinnig viele Leute auch unterwegs waren. Da habe ich dann die KDE Entwickler teilweise dann auch persönlich getroffen und das war immer so unglaublich, so eine unglaublich starke Atmosphäre, wahnsinnig spannende Menschen irgendwie, die da super engagiert dabei waren und coole Sachen gemacht haben und auch in so einer Gruppe, in einer Konstellation, in einem Team, was man anders überhaupt nicht zusammenkriegt. Und dieser Idealismus und diese Begeisterung, die da so in der Community zu spüren war und die ich auch heute immer noch spüre, wenn ich in Communities unterwegs bin, vielleicht nicht in jeder, aber doch in sehr, sehr vielen, die hält mich auch heute da wirklich noch wach und engagiert und das genieße ich auch heute immer noch, dass das so da ist. Natürlich kommen da, wenn man über die Ideale redet, auch noch dann so Fragen der Softwarefreiheit und ähnliches dazu. Damit habe ich mich dann auch eigentlich erst später auseinandergesetzt. Das ist mir heute, glaube ich, wichtiger als früher, wobei ich da heute auch ein bisschen, glaube ich, einen abgeklärteren Blick drauf habe natürlich und dann auch Ja, mehr so die praktischen Aspekte und auch den Pragmatismus, den man dann braucht, um Dinge vielleicht dann langfristig durchzusetzen und nicht mit dem Kopf durch die Wand, dass ich so was dann vielleicht im Moment oder inzwischen etwas von anstelle.


Ja. Jetzt, ja, Idealismus und Begeisterung, ich meine, das ist immer so eine schöne Vorstellung und ich kann das total nachvollziehen und ich bin da eigentlich auch fast ein bisschen neidisch, dass ich nicht irgendwann auch mit dem Softwareentwickeln dann angefangen habe und da irgendwo mal in so was reingerutscht bin. Aber ich meine, das bezahlt ja keine Rechnung. Vielleicht bleiben wir mal noch beim Beispiel Suse. Viele wissen das wahrscheinlich, aber wie hat denn Suse Geld verdient?


Ja, das Geschäftsmodell von SUSE war, Open-Source-Software zu nehmen, die zu paketieren, auf CDs zu pressen, in eine Form zu bringen, in der es einfach nutzbar ist und dann Nutzern zur Verfügung zu stellen. Und da die Software Open-Source ist, kann man dafür keine Lizenzgebühren verlangen, aber man kann eben für Support, für Maintenance von der Software, also für Updates oder auch direkten Support, wenn jetzt gerade Firmen Hilfe brauchen, mit irgendwas Fehler finden, Sicherheitsupdates brauchen, dort dann kostenpflichtige Abonnements zu verkaufen für Support und Maintenance. Das ist eigentlich so das Basisgeschäftsmodell, die Software selber ist umsonst und dann als zusätzliche Leistung darauf gibt es dann, gerade für die, die zahlen können und wo auch Geld dann dran hängt, wenn man in der Produktion Linux und darauf laufende Software einsetzt, dass man da dann natürlich als Firma auch andere Ansprüche hat, aber dann auch natürlich die finanziellen Mittel hat das entsprechend dahin nach umzusetzen. Das ist nicht ganz so arg die Lizenz zum Gelddrucken, wie wenn man einfach aus Monopolgründen den Preis für eine Software bestimmen kann. Das ist so ein bisschen ein härteres Modell, wo man wirklich arbeiten muss für sein Geld. Aber es ist trotzdem, wie wir ja heute sehen, ein absolut tragfähiges Modell und hat aus Susi inzwischen ja auch eine sehr große Softwarefirma gemacht, die nach wie vor erfolgreich agiert, seit vielen Jahrzehnten inzwischen.


Und ich meine, dieses Modell ist ja auch heute gang und gäbe. Und wenn man es mal irgendwie genau nimmt, sind Software-as-a-Service-Modelle gerade mit Open-Source-Software im Grunde ja genau das. Oder sehe ich das zu einfach?


Ja, Software-as-a-Service würde ich noch ein bisschen als Fortsetzung eigentlich davon sehen, weil... Also ich denke das Grundprinzip an, wenn man sagen will, Open-Source-Geschäftsmodellen, wobei Open-Source selbst jetzt sich nicht als Geschäftsmodell bezeichnen würde, ist natürlich immer, dass man irgendwas verkauft, was jetzt nicht die Software-Lizenz sein kann. Und das können halt alle möglichen Leistungen drumherum sein. Und inzwischen ist natürlich Software as a Service da ein ganz attraktives Modell, weil eben so viel Software inzwischen als Service konsumiert wird. Und mit modernen Cloud-Providern und den Systemen, die da dahinterstehen, ist da natürlich auch ein irrsinniges, Potenzial da und es ist so einfach wie nie auch Software zu hosten und aber trotzdem muss natürlich jeder machen auch die Anforderungen sind sind immer höher geworden aber es ist denke ich so praktisch würde ich das tatsächlich unterscheiden weil ja Support für Software die die dann beim Kunden eingesetzt wird doch auch ein anderes Modell verlangt auch vielleicht andere Fähigkeiten verlangt als Software wirklich zu betreiben. Und was interessanterweise auch vom Open-Source-Lizenzmodell her auch ganz unterschiedliche Konsequenzen hat. Also da gibt es eine ganze Reihe von Komplikationen, wo auch sich Fragen stellen, ob mit Software-as-a-Service dann Open-Source als Modell nicht auch tatsächlich Grenzen erreicht hat oder zumindest die Mechanismen, mit denen wir arbeiten, die traditionellen Open-Source-Lizenzen, ob die da nicht vielleicht auch Grenzen erreicht haben, wo dann diese Freiheit, die Open Source eigentlich verspricht bei Software as a Service, dann gar nicht mehr so arg wirklich garantiert werden kann mit der Nutzung von Open Source.


Okay, ich darf es mir nicht ganz so einfach machen. Ich sehe es ein. Und tatsächlich bin ich etwas erschlagen, wenn ich mir auf Wikipedia die Liste an Geschäftsmodellen für Open-Source-Software anschaue. Fängt an mit dem Verkauf von code-nahen Dienstleistungen, von Merchandise, über auch Benutzerinformationen. bis hin zu Code-Teilen oder andere IPs, die irgendwie damit zu tun haben oder einfach auch Erweiterungen, kommerzielle Erweiterungen von Code. Also da gibt es einen Haufen verschiedene, manchmal ähnliche, manchmal sehr unterschiedliche Modelle, wie man mit Open-Source-Software heutzutage Geld verdienen kann. Den Link lasse ich euch natürlich in den Show Notes. Ich halte mich ja jetzt grundsätzlich schon für jemanden, der sich für Softwareentwicklung interessiert, auch wenn ich kein Programmierer bin oder da nicht wirklich drin arbeite in dem Bereich. Aber ich habe da ein offenes Auge, ein offenes Ohr für, interessiere mich dafür. Aber ich bin bei den Begrifflichkeiten tatsächlich auch schon häufiger ins Straucheln gekommen. Es gibt FOSS, es gibt FLOSS, es gibt Quelloffen, es gibt frei, es gibt Open Source. Und das alles heißt im Grunde was ähnliches, aber nicht ganz dasselbe. Wie ist denn da so die gängigen Nomenklatur? Also ich brauche jetzt nicht die ganze Geschichte, aber wie drückt man sich denn da richtig aus?


Das hängt total von der Szene ab, in der man sich bewegt. Ich glaube, es ist inzwischen so ein bisschen pragmatischer geworden, auch dadurch, dass einfach viel mehr Menschen über Open Source sprechen, sodass einfach der Begriff Open Source sich eigentlich durchgesetzt hat, das Konzept zu beschreiben, die Lizenzen zu beschreiben, das Entwicklungsmodell zu beschreiben. Man kann natürlich da super ins Detail gehen und abgrenzen, was ist jetzt noch Open Source und was nicht und was ist noch im Sinne von Open Source und was nicht. Daneben gibt es natürlich dann aber auch nach wie vor natürlich die Leute, denen der Freiheitsaspekt und der Idealismus dahinter wichtiger ist und weniger das Pragmatische, die dann vielleicht eher von freier Software sprechen. Aber ich denke, wir sind glücklicherweise aus meiner Sicht tatsächlich ein Stück weit über diese Glaubenskriege, über die korrekte Bezeichnung hinweg und können uns heute vielleicht ein bisschen mehr darauf konzentrieren, tatsächlich einfach Open Source Software oder freie Software oder FOSS oder FLOSS oder wie auch immer man es bezeichnen möchte, Software zu schreiben und da einfach gute Sachen zu machen.


Ja, ich könnte mir tatsächlich vorstellen, dass das auch ein entscheidender Schritt war in so dieser Massenadaption. Also ich glaube in dem Moment, solange es einfach da verschiedene Lager gibt und die sich auch so ein bisschen versuchen, gegenseitig die Butter vom Brot zu nehmen, ich glaube, dass das so eine Adaption ja wahrscheinlich behindert, oder?


Ja, es ist immer so eine zweischneidige Geschichte. Konkurrenz belebt ja auch das Geschäft. Ich glaube, dass so eine gewisse Rivalität vielleicht auch zwischen Leuten, die eigentlich das Gleiche wollen, aber vielleicht mit unterschiedlichen Mitteln arbeiten, durchaus auch Energie freisetzen kann. das ist vielleicht nach außen hin dann nicht die der beste die beste voraussetzung um viele menschen davon zu überzeugen irgendwie dass es eine gute sache ist wenn wenn er noch so das gefühl irgendwie von konflikten wieder drin steckt aber inhaltlich glaube ich hat es schon auch viel befördert und ich denke dass die Ja, dieser Kampf, der früher geführt wurde, dass der auch notwendig war. Und ohne den, wenn es alles von vornherein irgendwie Friede, Freude, Eierkuchen gewesen wäre und da alle das gleiche gedacht hätten, dann wäre wahrscheinlich auch nicht so viel entstanden, wie entstanden ist. Und vielleicht wären auch manche Grenzen nicht eingerissen worden, die die Open Source heute doch tatsächlich eingerissen hat.


Okay, super spannend, weil ich hätte das jetzt tatsächlich so ein bisschen als Bremse vielleicht betrachtet, gerade wenn ich auch überlege, wie viel Zeit und Energie man ja mit Lizenzbedingungen verbringen muss, bis man die vergleicht und bis man die richtige ausgewählt hat und bis man überprüft hat, ob das im eigenen Projekt jetzt irgendwie verwendet werden kann oder nicht. Da geht ja auch wahnsinnig viel Energie verloren. Ich hätte jetzt gedacht, dass sowas vielleicht eher ein bisschen hinderlich ist. Aber vielleicht ist auch gerade die Konkurrenz das, was der Antrieb der Motor sein kann.


So ein bisschen die Frage auch, ist eine Monokultur gut oder ist was Diverses irgendwie besser? So ein Motto irgendwie, was man immer wieder hört aus der Community, im Kontext mit Open Source, ist ja auch so dieses Choice is good. Auswahl ist immer eigentlich eine positiv besetzte Geschichte. Ich weiß nicht, wie viele Menschen irgendwie ihren eigenen Editor oder ihren eigenen Chat-Client was weiß ich, was man heute so tut, seine eigene Blockchain programmiert, einfach nur, weil es geht. Was natürlich, da kann man sich dann die Frage stellen, wenn die alle an einem Strang ziehen würden und sich auf eine Sache konzentrieren würden, vielleicht wären wir dann viel weiter. Aber ich glaube, oft ist das eine theoretische Überlegung. Und in der Praxis lernt man so viel dabei, wenn man auch mal was macht, was vielleicht jetzt aus Produktivitätsgründen nicht das Richtige ist. Und das ist ja das Schöne an Open Source, dass da ganz viel auch einfach Möglich ist, ohne dass ich jetzt drüber nachdenken muss, ob sich das jetzt wirtschaftlich rentiert. Also wenn ich jetzt in meiner Freizeit Open-Source-Software entwickle, dann brauche ich da keinen Business-Case dafür. Das kann ich einfach machen, weil ich Lust drauf habe. Wenn ich das Privileg habe, die Zeit dafür zu haben, natürlich. Aber so diese Ja, sehr gezielte, konzentrierte Entwicklungen in ganz groß. Ich meine, so ein bisschen zeigt sich auch, dass der etwas verteiltere Ansatz von Open Source langfristig viele von diesen, ja, im Endeffekt großen Firmen auch entweder weggefegt hat oder zum Umdenken bewegt hat.


Das ist auch das, was ich so super spannend und super faszinierend finde. Wenn du jetzt wirklich darauf angewiesen wärst, ein wirtschaftlich tragfähiges Geschäft auf die Beine zu stellen oder ein Modell, das irgendwie mit Software zu tun hat, dann würdest du nicht in einen Sektor gehen, wo jemand schon was besetzt hat oder wo jemand schon unterwegs ist, wo es nicht schon 20 Editoren gibt oder egal welche Software eigentlich. Aber so in diesem Open Source-Ding, Da macht halt einfach dann jemand noch einen neuen Editor und dann kommt noch jemand und findet das gut und entwickelt den weiter. Und dann kommt noch jemand und sagt auch finde ich gut die Idee, aber ich mache doch lieber meinen eigenen. Das finde ich so spannend, diese Dynamik, die da drin steckt. Und da lässt sich auch keiner irgendwie unterkriegen und das ist eine total positive Atmosphäre, zumindest von außen betrachtet. Wie gesagt, ich stecke da ja nicht so tief drin. Wenn man versucht, Open Source zu definieren, dann kommt man ja, stolpert man ja über so die diversen Freiheiten, was gerade auch schon angesprochen. Jetzt weiß ich nicht, ob es da eine einheitliche Definition gibt oder unterschiedliche. Ich habe jetzt eine hier ausgegraben. Da geht es um vier Freiheiten und ich weiß nicht, ob es sich lohnt, die mal kurz durchzugehen und über jeden Aspekt auch mal kurz zu sprechen.


Ja, also das lohnt sich in jedem Fall. Ich denke, wenn man wirklich Open Source verstehen will, dann muss man diese vier Freiheiten verstehen. Die kommen jetzt aus der Zeit, wo es den Begriff Open Source noch gar nicht gab, sind also eigentlich so die vier Softwarefreiheiten, die damals so aus dem Kontext der FSF formuliert worden sind. Und ja, die vier Freiheiten kann man natürlich auch noch komplexer irgendwie gestalten und da kann man noch viel mehr dazu sagen, aber das fasst so die Essenz, glaube ich, total gut zusammen.


Na, dann machen wir doch genau das mal, oder? Ja. Soll ich dir ein Stichwort liefern oder bietest du die sowieso im Schlaf runter?


Ich könnte sie im Schlaf runter bieten, aber gib mir doch ruhig ein Stichwort.


Also, Freiheit nur. Die Freiheit, ein Programm auszuführen, wie man möchte, für jeden Zweck.


Genau. Das ist eigentlich die Power, die Open Source hat, um Verbreitung zu erreichen. Also, das ist diese Freiheit, wenn ich als Nutzer Software wirklich einfach verwenden kann und ich brauche keinen Vertrag mit einem Hersteller aushandeln. Ich muss nicht mich um irgendwelche Lizenz-Keys kümmern oder sonst irgendwas, sondern ich darf die Software einfach einsetzen und ich darf sie auch wirklich zu jedem Zweck einsetzen. Das ist halt diese Freiheit, die es möglich macht, Software als Nutzer ohne irgendwelche Einschränkungen zu verwenden. Und das ist natürlich eine ganz starke Freiheit, die einem Nutzer unheimlich viele Möglichkeiten gibt.


Dann hätten wir die Freiheit 1, das wäre die Freiheit, die Funktionsweise des Programms zu untersuchen und eigenen Bedürfnissen anzupassen.


Ja, das ist die Freiheit, wo der Name dann Open Source auch daherkommt, weil wenn ich ein Programm angucken möchte, dann brauche ich den Quellcode dazu, dann brauche ich den Sourcecode dazu. Das ist so die Manchmal könnte man vielleicht sagen, so die Bastelfreiheit, wenn ich Software einsetze, dass ich dann eben auch das Recht habe und auch die technischen Möglichkeiten. Das ist ja auch was, was von Open Source Lizenzen dann relativ weitgehend auch garantiert wird, dass ich dann wirklich selber Hand anlegen kann und für mich das Ganze anpassen kann. Und das setzt natürlich viel mehr voraus als jetzt das reine Nutzen. Das setzt voraus, dass ich dann auch die Fähigkeiten habe, das zu tun. Da muss ich eben dann doch irgendwie ein bisschen programmieren können vielleicht oder da zumindest irgendwie ein bisschen mit dem Quellcode irgendwie mich vertraut machen können. Und das geht aber natürlich total weit. Also wenn ich dann selber wirklich Anpassungen machen kann, dann habe ich halt wirklich die Kontrolle über die Software, die ich selbst einsetze und bin eben auch nicht mehr abhängig von einem Hersteller, der mir Software so liefert, wie das vielleicht gut für den Hersteller ist, aber nicht unbedingt gut für mich ist.


Ist mit dieser Freiheit auch eine bestimmte Pflicht verbunden? Wenn ich jetzt hergehe und vielleicht gerade in einem kommerziellen Umfeld dann ein Programm hernehme und verwende, habe ich dann auch die Pflicht, mir das genau anzugucken und zu schauen, was da passiert?


Ja, also das ist natürlich eine ganz weitgehende Frage, die gerade heute natürlich bei der Masse von Open Source Software, die wir so einsetzen, natürlich eine ganz große Rolle spielt. Die Auswahl, welche Software ich einsetze und was ich dann damit mache, wie sehr ich mich jetzt da selber irgendwie reinbegebe oder wie sehr ich dann vielleicht doch vielleicht zum Beispiel Dienstleister oder Anbieter, die dann Support anbieten oder sowas in Anspruch nehme. Das ist eine unheimlich komplizierte Frage, die auch nicht einfacher geworden ist. Das war früher viel einfacher, als ich tatsächlich noch in so einem Installer von der Linux-Distribution alle Open-Source-Software drin hatte, die es gab und ich alle ausprobieren konnte in endlicher Zeit. Das geht heute nicht mehr. Insofern, um den Gedanken jetzt zu Ende zu machen, ich glaube, dass die, es kommt natürlich eine gewisse Verantwortung. Ich meine, immer wenn ich selber irgendwie Hand anlege, dann übernehme ich natürlich Verantwortung. Wenn ich jetzt irgendwie mir einen Tisch kaufe und da anfange dran rumzusägen irgendwie, dann muss ich natürlich auch gucken, dass der dann hinterher nicht umfällt und auch niemand drunter liegt, wenn er umfällt. Und das heißt, natürlich habe ich mehr Verantwortung. Das ergibt sich aber aus meiner Sicht tatsächlich da so ein bisschen aus der Natur der Sache. Und es gibt noch viel mehr Verantwortung, die man wahrnehmen muss mit Open Source, die jetzt gar nicht in diesem Kontext von dieser zweiten Freiheit dann zu sehen ist. Da können wir vielleicht später noch.


Ich glaube, es ist auch ein großes Learning, das wir gerade so gesamtgesellschaftlich machen irgendwie. Also das vielleicht sind es viele naheliegende Dinge, aber trotzdem muss man da einfach gewisse Erfahrungen wahrscheinlich machen, bis man die auch wirklich verinnerlicht hat. Genau, kommen wir gleich nochmal drauf. Freiheit 2, das wäre die Freiheit, ein Programm weiter zu verbreiten und damit seinen Mitmenschen zu helfen. Und das löst bei mir tatsächlich interessante Überlegungen aus. Also ich bin in den 80ern oder den frühen 90ern das erste Mal mit Computern in Berührung gekommen und lange, lange war mir überhaupt nicht klar, dass man Software kaufen muss. Also es war immer sowas, das hat man halt weitergegeben. Und dann gab es irgendwie diese Disketten, da musste man dann Löcher reinschneiden, damit man da irgendwie mehr draufbringt und die hat man weitergegeben. Dieser Gedanke, Software nicht weiterverbreiten zu dürfen, der kam mir lange überhaupt gar nicht.


Ja, es ist ja auch kein natürlicher Gedanke, weil Software kann ich ja kopieren, ohne dass irgendjemand da wirklich was verliert dabei. Die kann ich verlustfrei replizieren. Das ist jetzt anders als bei einem Brot oder so. Wenn ich das jemand anders gebe, kann ich selber nicht mehr essen. Bei Software ist das anders. Und dadurch, dass die Kosten dafür auch eigentlich vernachlässigbar sind, habe ich bei Software tatsächlich die Situation, dass ich künstliche Beschränkungen einführen muss, um gewisse Geschäftsmodelle dann zu unterstützen. Die rechtlichen Grundlagen dafür, die sind ja auch erst in den 70er Jahren entstanden. Also vorher war Software gar kein eigenes Thema, sondern ist irgendwie mit Computern mitgekommen und da hat sich niemand so groß Gedanken drüber gemacht. Später wurde die Rechtsprechung entsprechend angepasst und eingeführt, die den Urhebern der Software da sehr weitgehende Rechte gibt, auch die Verbreitung der Software zu kontrollieren und das Recht da auch als Default sehr restriktive. Situation hat, wo wirklich dann Softwarehersteller die komplette Kontrolle darüber haben und damit natürlich dann auch Preise festlegen können, die sie nicht festlegen könnten, wenn die Software einfach kopiert werden könnte. Und es gab natürlich eine Zeit irgendwie, wo auch oder viele Bereiche, wo das dann weitgehend auch ignoriert wurde und dann die Raubkopien eigentlich der Standardweg waren, um dann irgendwie Softwares zu verbreiten. dann dieses Bewusstsein, das aber natürlich trotz dem Regeln unterliegt und das damit auch natürlich Wert einhergeht, wenn ich Software jemand anders gebe. Das ist so ein bisschen diese Richtung, die dann bei Open-Source-Software und gerade im Kontext von dieser dritten Freiheit aus meiner Sicht auch eine ganz wichtige ist, weil es geht Nicht nur darum, dass ich die Software einfach kostenlos weitergeben kann. Klar, das ist der Kern von dieser Freiheit und auch das, was die irrsinnige Verbreitung dann ermöglicht. Aber da sind wir bei einem anderen Aspekt der Verantwortung, der natürlich auch damit einhergeht. dass ich, wenn ich Software entwickle und unter einer Open-Source-Lizenz zur Verfügung stelle, dann damit sehr viele Nutzer bekommen kann und das auch gut so ist, aber ich damit natürlich auch eine gewisse Verantwortung dann mir bewusst oder auch unbewusst oder auch gegen meinen eigenen Willen erwerbe und Erwartungen dann auch entstehen. Und da werden dann natürlich die Grenzen auch dann wieder ein bisschen fließend, wo dann vielleicht sich dann aber auch wieder lohnt, dann vielleicht ein Geschäftsmodell aufzusetzen, um dann vielleicht manche Erwartungen zu befriedigen und dort dann Services anzubieten, sodass es nicht nur reine Nachbarschaftshilfe ist, Software weiterzugeben, sondern man tatsächlich auch dann ja in produktiven, kritischen Systemen Software einsetzen kann und auch die nötigen Garantien einkaufen kann, die ich brauche, um sowas dann verantwortungsvoll machen zu können.


Ich merke, dass der Punkt aus unserem Gespräch in mir nachhalt, weswegen ich auch hier kurz einhake, bevor wir dann zur vierten Freiheit übergehen. Ich frage mich, wie wirklich, wie subjektiv der Wert ist, den Software für uns hat. Wie viel bin ich bereit für Software auszugeben? Wir haben es gerade schon gelernt, Software zu verkaufen ist irgendwie wieder natürlich, denn ich kann es beliebig kopieren, mir entsteht dadurch kein Schaden, mir entsteht dadurch nur minimaler Aufwand. Vielleicht muss ich noch für den Datenträger irgendwie auch tatsächlich finanziell Mittel investieren, aber im Großen und Ganzen kann ich das ohne Aufwand beliebig oft vervielfältigen. Und das ist für viele halt so der Punkt, wo sie sagen, ja, dann ist der Wert natürlich auch entsprechend gering, aber wie viel Arbeit vorher in so eine Software reinfließt, das blenden dann wiederum viele bei dieser Überlegung aus. Und das ist eine grundsätzliche gesellschaftliche Diskussion. Das ist jetzt kein exklusives Open Source Thema, aber da das eben gratis in der Regel zur Verfügung steht, aber auch mit Geschäftsmodellen verbunden ist, passt es irgendwie für mich gerade sehr schön rein. Deswegen habe ich meine Kollegin Jamie mal losgeschickt, im Haus mal ein paar Kollegen danach zu fragen, wie viel Geld sie denn im Monat für Software ausgeben. Einfach, weil es mich interessiert hat und ich das gerne mal mit meiner Realität abgleichen wollte.


Wie viel gibst du monatlich für Software aus?


Im Schnitt übers Jahr gerechnet würde ich behaupten ungefähr 10 bis 20 Euro pro Monat. Wenn ich es wie gesagt aufs Jahr hochrechne, sind natürlich Monate dabei, wo gar nichts ausgegeben wird und dann Monate, wo ein höherer Betrag ist. Aber ich sage mal 20 Euro.


Also für so Software direkt gebe ich nicht so viel Geld aus, aber das hat andere Gründe. Man müsste dafür bestimmt Geld ausgeben, aber ich tue es halt nicht. Und was Spiele und vor allem auch Musik und sowas angeht, komme ich pro Monat so zwischen 70 und 100 Euro.


Also wenn man alles zählt, also ich zähle auch Spiele dazu und sowas, dann sind es denke ich mal schon so 100 bis 150 Euro im Monat, die manchmal zusammenkommen.


10 Euro.


Okay, alles klar, dankeschön.


Wenn ich alles Software zusammenzähle übers Jahr, privat für zu Hause, die wir einkaufen zum Beispiel, also was weiß ich, Kameras fürs Haus und was dazu gehört, komme ich auf 10 Euro.


Also Software, nicht Hardware.


Software, oh Gott. Da habe ich einmal einen Rechner gekauft, da ist ein Software drauf. Da habe ich fast nur bezahlt. Dann ist es ja nicht so viel.


Nee, also es muss ja auch nicht sein, jeder ist ja verschieden anders und so weiter.


Ich zum Beispiel zahle da jetzt auch nicht. Gehört auch Netflix dazu? Ich denke schon. Dann passen die 10 Euro.


Dann passen die 10 Euro. Okay, alles klar, dann passt das. Dankeschön.


Wow, ich meine, das ist jetzt in keinster Weise repräsentativ, aber das hätte ich jetzt anders erwartet. In Zeiten von Streamingdiensten und Software as a Service, auch bei Office und bei Adobe und bei wem auch immer, hätte ich da schon mit deutlich höheren Beträgen gerechnet. Ich für meinen Teil komme auf locker über 100 Euro pro Monat und bin wirklich ein bisschen überrascht, dass das bei anderen doch so, ja, glaube ich, andere Kolleginnen da nochmal im Nachgang drauf ansprechen. Sorry für dieses kurze Abschweifen. Manchmal muss ich so einer Neugier einfach nachgehen. Wir waren noch nicht fertig mit unseren vier Softwarefreiheiten. Es fehlt noch Freiheit 3. Das wäre die Freiheit, das Programm zu verbessern und die Verbesserung der Öffentlichkeit freizugeben, damit die gesamte Gemeinschaft davon profitiert. Das klingt eigentlich auch eher wie eine Pflicht, wenn ich es mir so überlege.


Ja, das ist auch, das hängt ein bisschen auch von der Open-Source-Lizenz ab, wie viel Pflicht da dahinter steht. Also es gibt ja verschiedene Klassen von Open-Source-Lizenzen und manche zwingen das, wenn ich Software weitergebe, das auch unter der entsprechenden Lizenz wieder mache und damit auch anderen das Recht einräume und dieselben Bedingungen irgendwie zu verwenden, andere Open-Source-Lizenzen. sind da etwas weniger strikt, die kann ich dann auch, da kann ich dann den Verbreitungsweg quasi auch wieder abknipsen und das Ganze in proprietäre Produkte einbauen. So ein bisschen ist diese Freiheit ja auch die Kombination aus dem Verändern und Weitergeben und damit ermöglicht ermöglicht sich dann eigentlich dieses dieses ja entwicklungs ökosystem also dass ich dann das menschen zusammenarbeiten können das aber niemand das monopol auf die software hat und andere von der von der entwicklung abhalten kann und in vielen fällen hat man ja. funktionierende Communities, wo das jetzt kein Thema ist und alle an einem Strang ziehen. Aber oft hat man ja auch den Fall, dass dann doch irgendwie vielleicht sich eine Abzweigung ergibt und jemand anders irgendwie das Produkt auf eine andere Art und Weise weiterentwickelt und die Open Source Software in eine andere Richtung steuern will. Und da sind wir dann wieder bei der Frage, muss man eigentlich mehr als eine Lösung haben und ist zu viel Auswahl vielleicht auch ein Problem? Aber es ist auch wieder so eine reinigende Kraft in dem Ökosystem, dadurch, dass doch die Freiheiten und Rechte für alle auch gleich sind. Also das ist aus meiner Sicht auch ein ganz wichtiger Punkt. Grundsatz in Open Source und vor allen Dingen, wenn man wirklich erfolgreiche Communities aufsetzt, dass die Rechte und Pflichten für alle gleich sind und man sich wirklich auf Augenhöhe begegnet und zusammen an einer gemeinsamen Sache arbeitet mit gemeinsamen Zielen und da jetzt nicht irgendwie privilegierte Menschen oder Organisationen drin sind, die einfach qua Status andere Rechte haben als die anderen Menschen.


Nochmal kurz zusammengefasst, diese vier Freiheiten, die von der FSF, das ist die Free Software Foundation, die 1985 von Richard Stallman gegründet wurde, und die hat ursprünglich mal diese vier Freiheiten definiert. Ich fasse nur nochmal kurz zusammen, damit ihr die einmal am Stück hier hört. Die Freiheit 0 ist die Freiheit, das Programm auszuführen, wie du möchtest, für jeden Zweck. Die Freiheit 1 ist die Freiheit, die Funktionsweise des Programms zu untersuchen und den eigenen Bedürfnissen der Datenverarbeitung anzupassen. Die Freiheit 2 ist die Freiheit, das Programm weiter zu verbreiten und damit den Mitmenschen zu helfen. Die Freiheit 3 ist die Freiheit, das Programm zu verbessern und diese Verbesserung der Öffentlichkeit freizugeben, damit die Gemeinschaft auch davon profitiert. Das sind die vier Freiheiten, die natürlich nur wahrgenommen werden können, wenn auch Zugang zum Quelltext gegeben ist. Das hängt natürlich alles damit zusammen, dass es offen und verfügbar ist. Und gerade dieses offen und verfügbar ist natürlich, das kann man sich super vorstellen, wenn da ein paar Menschen vielleicht sogar aus idealistischer Motivation heraus zusammen an so einem Projekt arbeiten, weil sie was cool finden, weil sie Bock auf was haben, weil sie die Gemeinschaft feiern. Und dass die hier dann die Dinge frei ins Netz stellen für alle, dass die genauso Freude dran haben, das kann ich mir super vorstellen, das ist ein schönes Bild. Ich frage mich aber, was passiert, wenn Unternehmen ins Spiel kommen. wo ich noch nicht so richtig ein Gefühl dafür habe ist, wie ich als Unternehmen oder wie jemand als Unternehmen sinnvoll da mitspielen kann. Oder wie gibt es da irgendwie, ich weiß nicht, Best Practices oder wie kann ein Unternehmen heute sinnvoll mit Open Source umgehen.


Ich glaube, man kann es ganz gut in so einer Abfolge von ... ... Stufen der Open-Source-Nutzung beschreiben. Wo die meisten Unternehmen anfangen, ... ... es gibt noch so eine Vorstufe, ... ... wo früher vielleicht noch mehr Unternehmen drin waren, ... ... heute vielleicht auch noch ab und zu Unternehmen drin sind. Das ist so die Stufe der Ablehnung oder der Ignoranz, ... ... wo man sagt, okay, ich habe mit Open-Source gar nichts zu tun, ... ... das ist nicht für mich relevant. Das wird in den meisten Fällen nicht stimmen, weil in den meisten Unternehmen irgendwo Open-Source-Software wahrscheinlich inzwischen drinsteckt in irgendeiner Form.


Ich habe das nach unserem Gespräch kurz nachrecherchiert anhand des Open-Source-Monitors der Bitkom vom letzten Jahr. Demnach setzen 71 Prozent der befragten Unternehmen Open-Source-Software ein, drei Prozent weiß es nicht genau. Das heißt, es bleiben 26 Prozent der Unternehmen übrig, die von sich behaupten, dass sie keine Open-Source-Software einsetzen.


Aber die eigentliche Abstufung sind dann so diese vier Stufen. Zunächst mal das Konsumieren von Open-Source-Software, was relativ einfach passiert, dadurch, dass ich überhaupt Software einsetze oder dass ich anfange, bewusst auch Open-Source-Projekte zu benutzen, vielleicht anfangs für Ja, unkritische Sachen, so in der Softwareentwicklung zum Beispiel Tools oder dann vielleicht später auch in eigenen Produkten. Die zweite Stufe wäre dann, dass man dann sich mit den Communities mehr auseinandersetzt, mit den Leuten, woher die Software kommt, dass man da Beziehungen aufbaut und dass man mehr zum Teilnehmer wird. Die logische Fortsetzung davon ist dann, dass man irgendwann selbst Code beisteuert und dass man wirklich Contributions macht in Open-Source-Projekten. Das ist für viele Unternehmen dann tatsächlich nochmal so ein Schritt, der schwierig wird, weil da muss man plötzlich Dinge nach außen geben, die man vorher nicht nach außen gegeben hat, ohne dafür Geld zu bekommen, zumindest nicht direkt. Und die vierte Stufe, das ist dann so das souveräne Umgehen mit Open-Source, wenn man wirklich Open-Source beherrscht und verstanden hat und strategisch einsetzt, seine Produkte zu gestalten, um vielleicht auch Märkte zu gestalten. Und typischerweise, denke ich, ist es wirklich so ein Ablauf, dass gerade inzwischen mit der riesigen Verbreitung von Open Source sich so eine natürliche Nutzung von Open Source einfach in den meisten Unternehmen ergibt. Und dann, wenn man da genauer reinschaut, dann wird man feststellen, man muss Dinge tun, Open-Source-Lizenzen zu verstehen und zu erfüllen, um Sicherheit zu garantieren und sicherzustellen. Und dann kommt man automatisch auch zu diesen späteren Stufen, wo man dann merkt, das geht eigentlich nur dann wirklich in der Zusammenarbeit. Und die Zusammenarbeit findet dann eben zu den Bedingungen der Communities und der Open-Source-Entwicklungsprozesse und der dahinter stehenden Kultur und den bewährten Prinzipien, die dahinterstehen, statt. Und jetzt nicht unbedingt zu den Bedingungen, typischerweise in proprietären Softwareentwicklungsfirmen herrschen.


Jetzt weiß ich nicht genau, wie detailliert oder wie ausführlich wir über deinen aktuellen Job reden wollen und dürfen, aber wo würdest du dich da jetzt gerade oder dich und deinen Arbeitgeber da gerade einsortieren?


Ich arbeite ja bei der DB Sister, der IT-Tochter der Deutschen Bahn, und mein Job ist genau diese Open-Source-Begleitung, dort die entsprechende Expertise aufzubauen, den entsprechenden Rahmen zu schaffen. in dem wir Open Source dann eben professionell sicher einsetzen können und dann auch wirklich den Wert rausziehen. Und ich befinde mich da genau in dieser Phasenentwicklung. Die ist nicht so ganz linear und in einer größeren Firma natürlich auch nicht in jedem Firmenteil irgendwie an derselben Stelle. Ich würde sagen, wir haben so ein paar Bereiche, wo wir tatsächlich so ein bisschen Pionierarbeit leisten, wo wir relativ weit sind schon. Wir haben zum Beispiel einen Contribution-Prozess, mit dem wir Open-Source-Software nach draußen auch veröffentlichen und uns an Projekten beteiligen, wo wir sogar unsere Richtlinie als Open-Source veröffentlicht haben. Aber der Schwerpunkt liegt sicher auf der Nutzung von Open Source und den damit verbundenen Herausforderungen und dort einfach die Infrastruktur, die Richtlinien und die entsprechenden Begleitdokumentationen und was man da so alles braucht, Ausbildung von Leuten und Ähnliches, dass man da dann wirklich die Grundlage schafft, damit das Ganze zuverlässig einsetzbar ist. Und auch dann von dem Wert, den Open Source hat, auch im Endeffekt was ankommt und man sich dann nicht in Dingen verstrickt, die dann doch wieder Probleme verursachen.


Du hast es ja gerade schon angedeutet. Ich meine, ob es vielen Unternehmen klar ist oder nicht, Open Source ist eigentlich schon längst überall mit angekommen. Ich meine, wir haben das jetzt gar noch nicht so explizit betont. Es geht ja da auch nicht immer um fertige Software, sondern oft sind es ja einfach auch nur Programmteile, irgendwelche Bibliotheken, irgendwelche Tools, irgendwelche Assets, die vielleicht unter Open Source Lizenzen stehen, die dann verwendet werden. Und das Thema ist natürlich jetzt neulich hochgekocht, das ist das, wo ich vorhin schon mal angedeutet habe, als Log4J jetzt irgendwie einmal groß auch durch die Medien geturnt ist und ich glaube für viele zum ersten Mal das Thema Open Source damit auch so in den Nachrichten war und irgendwie gefühlt in der Gesellschaft angekommen. Kannst du mal ganz kurz zusammenfassen, was bei diesem Beispiel, was da genau schiefgelaufen ist und wie man damit aber vielleicht in Zukunft besser umgehen kann mit solchen Themen, dass sowas nicht nochmal passiert?


Ja, gerne. Es ist ganz interessant, weil Lock4J ist eine von wahrscheinlich tausenden solcher Geschichten, die man erzählen kann. Ist interessanterweise in einem Bereich passiert, wo man normalerweise sowas nicht unbedingt irgendwie als den heißesten Ort irgendwie für Probleme vermuten würde. Also Log4J ist eine Java-Bibliothek, also eine sehr verbreitete Programmiersprache, die eigentlich in ganz vielen Unternehmen eingesetzt wird, gerade so im Enterprise-Bereich. Und ist eben eine Bibliothek, die für sich genommen jetzt gar nicht so wahnsinnig spannend ist. Die macht so Logging, dass das irgendwie so Protokolle eigentlich für den internen Gebrauch irgendwie geschrieben werden können. Und die ist dann einfach mit verbaut, so als Teil, als eine Komponente von sehr vielen, die dann eigentlich in fast jeder Software drin ist. Und ja, Software hat Bugs. Das gilt für jede Software, unabhängig davon, ob sie offen oder geschlossen ist oder unter welcher Lizenz sie steht. Und diese Log4J-Komponente hatte einen Sicherheitsbug, der es ermöglicht hat, böswilligen Angreifer einen Code auszuführen auf den Maschinen, wo die Software läuft. Und das ist natürlich ein Riesenproblem, wenn man Software dann insbesondere in irgendwelchen kritischen Bereichen betreibt, wo dann solche Lücken auftreten. Und dann ist natürlich die nächste Frage, wenn so eine Schwachstelle festgestellt wird, wie behebe ich die jetzt? Und im Grunde ist das relativ einfach, weil in den meisten Fällen werden auch Open-Source-Projekte einfach gut gepflegt und da gibt es dann eine neue Version, die den Bug nicht mehr hat und dann muss ich diese Version einspielen. Und dann bin ich wieder im sicheren Bereich und es gibt keine Schwachstelle mehr für Angreifer. Aber dieses Einspielen eines Updates, das setzt natürlich voraus, dass ich weiß, wo ich die Software einsetze und dass ich auch in der Lage bin, dort Updates zu machen. Und das ist das, wo es ganz schön geknirscht hat. Gerade in diesem Fall, weil das eine sehr verbreitete Software ist, die jetzt nicht nur irgendwie in exotischen Systemen eingesetzt wird, sondern auch sehr tief irgendwie drinsteckt. Und dadurch, dass Open-Source-Software, oder Software generell, aber bei Open-Source-Software ist es ein bisschen transparenter und ein bisschen plakativer, aus sehr vielen Komponenten besteht, muss ich halt tatsächlich irgendwie dann erstmal feststellen, was setze ich eigentlich für Komponenten ein. Und diese Übersicht, wenn ich die nicht bewusst erstelle, dann muss ich da erstmal auf die Suche gehen und nachfragen. Und das kann eine ganz schön aufwändige Geschichte sein. Wenn ich dann manuell anfangen muss, irgendwie in meiner Software rumzuwühlen und zu gucken, ob da vielleicht ein Log4j drin ist. Und wenn man das gut aufgesetzt hat, so in den ... ... weiterentwickelten Softwareentwicklungsprozessen, ... ... sind so Sachen dann automatisiert. Und ich habe Übersichten, die automatisch generiert werden, ... ... wo drinsteht, was ich wo einsetze, ... ... wo ich dann einfach nachschauen kann, ... ... wo ich auch automatisch dann gleich eine Meldung kriege, ... ... wenn so ein Sicherheitsproblem berichtet wird. Und ich dann idealerweise vielleicht sogar automatisch ... ... da entsprechend einen Fix einspielen kann. Aber dieses Bewusstsein, dass ich vielleicht nicht weiß, welche Software ich tatsächlich einsetze, die ist, glaube ich, in diesem Fall tatsächlich vielerorts dann erst mal hochgekommen. Und da gibt es auch ganz absurde Geschichten, dass Firmen dann plötzlich E-Mails schreiben an Open-Source-Entwickler, wo sie dann um Berichte, also nicht bitten, sondern Berichte einfordern. Sagt uns doch jetzt mal, ob ihr von der Schwachstelle betroffen seid und so. Und da natürlich erstmal auf taube Ohren stoßen, weil da sind wir wieder beim Thema Verantwortung. Das ist natürlich genau die Verantwortung, die Firmen heute wahrnehmen müssen, wenn sie Open Source Software einsetzen, und das sind eigentlich fast alle, dass sie dann auch die entsprechenden Prozesse haben, die entsprechenden Werkzeuge haben, dass sie das entsprechende Bewusstsein haben, auch die Kultur haben. Änderungen zu machen, weil tatsächlich, wenn man sich das anschaut, Lock4J war jetzt sehr prominent, aber Sicherheitsupdates in Software sind unheimlich häufig in jeder Art von Software und da muss ich dann natürlich in der Lage sein, da auch reagieren zu können und da hilft es mir nicht, wenn ich nur alle zwei Jahre mal irgendwie ein Update in einem festgelegten Zeitfenster einspiele, sondern da brauche ich dann wirklich kontinuierliche Prozesse, in denen ich auf agilere Art und Weise ich an solche Probleme rangehen kann.


Du hast gerade schon gesagt, du könntest da ganz viele Geschichten erzählen. Hast du das Gefühl, dass wir da an der Stelle jetzt unsere Lektion gelernt haben oder ist das jetzt eine latente Gefahr, die uns eigentlich jetzt jederzeit wieder ereilen kann?


Es gibt so ein paar verschiedene Aspekte, die da zu berücksichtigen sind. Also so diese grundsätzliche Gefahr, dass ich Bugs in Software habe, die ich fixen muss, die begleitet uns einfach permanent. Die hat uns schon immer permanent begleitet. Das wird natürlich schwieriger, wenn einfach die Menge von Software zunimmt, die ich einsetze. Insofern, wenn ich in der heutigen Zeit der Digitalisierung denke, wo einfach ganz viel Software hinzukommt, da wird das Problem natürlich größer. Aber das ist eigentlich nichts wirklich Neues und auch nichts wirklich Kompliziertes. Also da gibt es bewährte Strategien, wie man damit umgeht. Das sind Probleme, die man lösen kann. Wo das Ganze tatsächlich ein bisschen komplizierter wird und auch problematischer wird, das läuft immer so unter dem Schlagwort der Software-Lieferkette, wenn man sich anschaut, woher die Software eigentlich kommt. wie viele Menschen da beteiligt sind und wo ich vielleicht schwache Glieder in der Kette habe, wo ich dann vielleicht Software unbewusst einsetze, die überhaupt nicht gepflegt wird oder die von Menschen gepflegt wird, die nicht genug Zeit haben oder nicht genug Ressourcen haben, um da wirklich die Arbeit so zu machen, wie sie von den Nutzern vielleicht angenommen wird. Da ergibt sich tatsächlich dann so manche Fragestellung. Das geht so manchmal so unter diesem Titel der Nachhaltigkeit von Open-Source-Projekten, wo man sich dann die Frage stellen muss, ja, welche Open-Source-Software kann ich eigentlich wirklich einsetzen? Je nachdem, was für einen Use-Case ich habe, auch wie viel Anforderungen ich habe. Da muss ich dann eine Entscheidung treffen, welche Software für mich dann auch so gepflegt wird oder muss halt auch was beitragen dazu, dass genug Menschen vorhanden sind, die Software dann auch zu pflegen. Da kann man dann wirklich Firmen auch in der Verantwortung sehen, die viel Open-Source-Software einsetzen und damit, wie wir schon gesagt haben, eigentlich fast alle Firmen in der Verantwortung sehen, dort dann auch dazu beizutragen, dass das Ganze nicht nur ein Nehmen ist, sondern dass da auch ein Geben stattfindet. Und, äh, ja, das ist so dieser Nachhaltigkeitsaspekt. Ähm, es ist jetzt beim Thema Log4J, das ist, äh, find ich auch so ganz interessant irgendwie. Ich sagte schon, das ist eigentlich so ein Bereich, wo man's nicht erwarten würde. Es gibt irgendwie Horror-Stories so aus dem JavaScript-Bereich, wo dann irgendwie teilweise auch dann wirklich böswillige Angriffe stattfinden oder Maintainer von, äh, sehr verbreiteten, aber eigentlich sehr kleinen Paketen dann selber irgendwie da Statements abgeben, indem sie ihre eigene Software sabotieren. Und in dem Java-Bereich war das überhaupt nicht der Fall. Das war einfach nur ein Bug irgendwie in einem Projekt, wo die Maintainer zwar auch wenige und die waren auch nicht gut bezahlt, aber die haben ihren Job super erledigt. Also, da war jetzt kein Angriff im Spiel oder auch nicht das Problem, dass da irgendwas nicht gepflegt war. Trotzdem ist es natürlich gut, wenn man solchen Freiwilligen dann auch entsprechend die Möglichkeiten bietet, das zu tun. Aber das war ein bisschen anders gelagert. Aber das Spektrum dieser Software-Lieferketten-Probleme ist tatsächlich sehr groß. Und gerade wenn man sich dann im Bereich Sicherheit bewegt, wo man dann vielleicht auch mit wirklich Angriffen rechnen muss, da muss man da natürlich schon Mittel und Wege finden, da zuverlässige Strukturen aufzubauen, um sich dagegen zu schützen. Und das ist, denke ich, so eine von den Herausforderungen, vor denen auch jetzt viele Firmen stehen, sich da eben weiterzuentwickeln. einfach als notwendige Voraussetzung dafür, dass insgesamt Software zuverlässig einsetzbar ist.


Wenn sowas wie jetzt in dem Fall so gesellschaftlich irgendwie hochkocht und so, dann ist ja auch recht schnell irgendwie der Ruf nach irgendwie politischer Einmischung da oder dass irgendjemand da was unternimmt oder dass irgendjemand sich damit beschäftigt. Jetzt habe ich aber das Gefühl, dass die Politik in Deutschland besonders beim Thema Open Source auch noch einen gewissen Weg vor sich hat und vielleicht noch nicht ganz da ist, wo sie vielleicht sein könnten oder sein müssten. Wie würdest du die Lage an der Stelle einschätzen? Hat die Politik im Bereich Open Source oder andersrum? Wir als Land, unser Podcast heißt ja Schwarz-Krot-Gold, wie stehen wir als Land da? Sind wir eher ein Entwicklungsland, wenn es um Open Source geht oder sind wir eigentlich da vorne mit dabei?


Ja, ich hab ein bisschen Schwierigkeiten mit der Frage, weil für mich Open Source so eine unglaublich internationale Geschichte ist, wo ich gar nicht an Ländergrenzen irgendwie Halt mache. Und wenn man sich mal anschaut, wer solche Software entwickelt, das sind verteilte Communities mit Menschen überall. Und der Code hört nicht irgendwie an der Grenze auf, sondern wird frei verteilt und auch frei entwickelt. Natürlich gibt es auch Rahmenbedingungen und so weiter, die vielleicht dann doch wieder an nationaler Gesetzgebung und so weiter hängen, wobei man doch sagen muss, dass, denke ich, gerade in Deutschland irgendwie ja da sehr im europäischen Rahmen sind. Es ist ein bisschen die Frage, wie viel die Politik da machen muss und in welchen Bereichen. Es gibt ja so manche Initiativen, die da auch sehr starke Forderungen stellen, also so diese Public Money, Public Code Forderungen, dass wenn der Staat Software finanziert, dass die dann auch allen Bürgern zur Verfügung stehen sollte. Eigentlich ein ganz logisches und eingängiges Konzept. Aber dann auch gar nicht so einfach durchzusetzen und umzusetzen. Also da brauchst du dann schon auch wirklich Willen der Politik. Und mir fällt es schwer, das irgendwie einzuschätzen, ob wir da Entwicklungsland sind oder nicht. Ich glaube, dass wir uns da eigentlich gar nicht so schlecht bewegen, auch weil die Unterschiede gar nicht so arg groß sind zwischen den verschiedenen Ländern. Was interessant ist, ist dann, wenn so Sachen passieren wie zum Beispiel in den USA, wo es dann diese Verordnung des Präsidenten gibt, der sehr, sehr genau irgendwie Anforderungen an Software stellt, wo dann eben diese Supply-Chain-Fragen, diese Lieferketten-Fragen dann auch reguliert werden und unter Anforderungen gestellt werden. Sowas haben wir in dem Maße jetzt in Deutschland nicht. Aber es ist auch die Frage, ob sich so Sachen dann nicht auch selber regeln können. Also ich habe dann auch ein sehr hohes Vertrauen irgendwie in die Community. Ich glaube, was das Wichtige ist, ist, dass die Politik dort einfach auch Chancengleichheit herstellt und jetzt nicht verhindert, dass Open-Source-Software eingesetzt wird, weil vielleicht proprietäre Software irgendwie die stärkeren Lobbyverbände hat oder die Hersteller irgendwie da die wirtschaftlich tieferen Taschen haben. Ich glaube, diese Chancengleichheit, die ist schon ein wichtiges Kriterium, was man herstellen muss. Und da muss man schon in der Praxis sehen, da gibt es in Deutschland schon auch manchmal merkwürdige Entwicklungen, wo man sagen muss, okay, da passieren Dinge, wo man sich fragen muss, ob das tatsächlich zukunftsgerichtet ist oder ob wir da nicht vielleicht doch eher uns in Richtung Entwicklungsland orientieren.


Ich liefere mal noch ein paar Zahlen, um das Gefühl von Cornelius, der das schon sehr, sehr gut und treffend aus dem Bauch heraus auch einfach einschätzen kann, noch ein paar Zahlen, um das Ganze belastbarer zu machen. Es gibt eine Studie aus dem Jahr 2018, die nennt sich Open Source Development Around the World, a comparative study von mehreren Autoren. Ich lasse euch einen Link in den Show Notes. Die haben sich die Top 10.000 Projekte nach Sterne, nach Beliebtheit auf GitHub angesehen. Sie haben dann teils automatisch, teils von Hand diese Projekte einmal gefiltert, also alles raus, was irgendwie kein Coding-Projekt ist, alles raus, was irgendwie in einer sehr, sehr exotischen Programmiersprache geschrieben ist und Sie haben alles rausgeworfen, was dann keinem Land zugeordnet werden konnte. Und übrig geblieben sind 5400 Projekte ungefähr gerundet und die haben sie sich angesehen und haben die dann auf der Weltkarte verteilt und haben geguckt, was da noch so für Erkenntnisse und Daten drinstecken und ja, keine große Überraschung. Die USA ist allein verantwortlich für 42 Prozent der Projekte, also für über 2.300 Projekte. Deswegen haben sie sie dann auch aus einigen der Grafiken und Daten und Untersuchungen, die sich nachrängig gemacht haben, dann rausgenommen, um die Verteilung einfach besser darstellen zu können. Aber die USA ist unangefochten an Platz eins. Im Ergebnis hatte die USA dann dreimal so viele Projekte wie das zweitplatzierte Land mit rund 800 Projekten. Und das war, da war ich dann doch etwas erstaunt, das war China. Und danach geht es noch mal steil nach unten. Danach kommt England mit ungefähr 350 Projekten. Und dann kommt aber auch schon Deutschland mit ungefähr 250 Projekten. Also wir sind auf einem guten vierten Platz. Nach uns kommt Kanada, danach Frankreich, danach Japan, danach Australien, Schweden, Russland, Niederlande, Indien, Spanien, Polen und so weiter und so weiter. Aber wir sind da sehr, sehr gut platziert. Natürlich arbeitet diese Studie mit Proxywerten, mit Annäherungen, mit Annahmen. Also die Annahme zum Beispiel, dass alle Open-Source-Projekte auf GitHub sind, ist schon eine, die nicht stimmt. Aber ich glaube, es zeichnet ein ganz gutes Bild, ein hoffentlich sehr allgemeingültiges Bild der Open-Source-Situation in Deutschland und der ganzen Welt. Da gibt es noch eine zweite Studie, die ich mir angeguckt habe. The Geography of Open Source Software Evidence from GitHub. Auch wieder mehrere Autoren nachzulesen auf ScienceDirect.com. Die haben sich die Kontributoren näher angeguckt von Open Source Projekten auf GitHub, haben versucht da aus den Commits irgendwie Rückschlüsse auf das Land zu ziehen, in denen die angesiedelt sind. Und wenn sie da nicht weitergekommen sind, haben sie sich sogar teilweise noch die Twitter-Accounts von den Kontributoren angeguckt und sind so am Ende auf 587.000 aktive Open-Source-Kontributoren gekommen, die sie dann zumindest auf ein Land mappen konnten, von über einer Million Accounts, die sie sich angeguckt haben. Die Studie ist übrigens aus dem März 2022, also maximal aktuell. Und wie gesagt, die schaut sich, die bezieht sich nicht auf die Anzahl der Projekte, sondern die bezieht sich auf die Anzahl der Entwickler, die auf GitHub unterwegs sind und die sich an Open Source Projekten beteiligt haben. Und auch da ist die USA unangefochten auf Platz 1. Allerdings mit nur 24,6 Prozent und nicht 42 wie in der Studie mit den Projekten. Also die Entwickler verteilen sich dann doch etwas besser über die Weltkugel. Aber auch hier ist auf Platz zwei China. Die haben einen Anteil von 5,8 Prozent. Und dritter Platz ist dann schon Deutschland mit 5,6 Prozent. Also Deutschland spielt hier ganz vorne mit. Danach kommen Indien, Großbritannien, Brasilien, Russland, Frankreich, Kanada, Japan und so weiter und so weiter. Interessant ist bei der Studie auch, die haben sich nämlich auch Daten von vor zehn Jahren angeguckt, also ähnlich erstellte Daten. Und da hat China zum Beispiel überhaupt noch keine Rolle gespielt. China hat sich hier in den letzten zehn Jahren auf Platz zwei gecodet. Wenn wir uns die Anzahl der Entwickenden oder der Beitragenden an Open-Source-Projekten im Verhältnis zur Bevölkerung angucken, dann ist vielleicht auch logisch, dass eher kleinere Länder auch hier recht weit vorne in der Liste landen können. Deswegen belegt Platz 1 auch Island, die insgesamt zwar nur 421 Entwickende haben in diesem Kontext, die aufgrund ihrer niedrigen Bevölkerungszahl dann aber auf 105 Entwickende pro 100.000 Einwohner kommen. Zweiter Platz geht an die Schweiz, dann Norwegen, dann Schweden, Finnland, Dänemark, Niederlande, also sehr Mittel- und Nordeuropa-lastig. Dann auf Platz 8, das erste Mal außerhalb von Europa, Kanada, Platz 9 Estland, Platz 10 Luxemburg, dann folgt Neuseeland, Singapurland, die Vereinigten Staaten, das Vereinigte Königreich, Australien und auf Platz 17 kommt dann Deutschland mit immerhin noch 40 Open-Source-Entwicklenden pro 100.000 Einwohner. Insgesamt beides sehr interessante Studien. Kann ich jedem nur empfehlen, da mal einen Blick reinzuwerfen. Die Frage ist natürlich, wie aussagekräftig sind die Daten und die gewählten Untersuchungsmethoden. Aber es gibt doch zumindest ein grobes Gespür dafür, wie wir im internationalen Vergleich dastehen. Und ich glaube, wir müssen uns gar nicht so richtig verstecken. Eigentlich können wir an der Stelle relativ stolz sein. Wo es aber in meiner Wahrnehmung noch ein bisschen fehlt, ist die Adaption des Themas in der Politik. Wobei wir da aufpassen müssen, dass wir uns nicht, ja nee, ich muss aufpassen, dass ich mich nicht zu sehr von Vorurteilen leiten lasse. Es gibt eine digitale Agenda, in der Open Source eine Rolle spielt. Es gibt einen nationalen Aktionsplan, der bis März 2023 eine Open-Source-Plattform für die öffentliche Verwaltung einführen will, also wirklich sicherstellen will, dass in der öffentlichen Verwaltung verstärkt Open-Source-Software zum Einsatz kommt. Es gibt ein Open-Data-Portal unter gavdata.de, wo Datensätze öffentlich zugänglich gemacht werden. Also es ist Bewegung drin und tatsächlich gibt es auch diese einzelnen Projekte. Trotzdem beschleicht mich der Eindruck, dass es in der Breite noch ausbaufähig ist. Ich finde diese Public Money, Public Code Forderung sehr interessant, weil wir im Grunde ja eine sehr, sehr ähnliche Diskussion zum Beispiel haben, wenn es um Kultur geht, auch im Land. Das hat jetzt vielleicht, ja doch, hat auch was mit Politik zu tun. Wenn wir von den Öffentlich-Rechtlichen verlangen, dass die ihre produzierten Sendungen frei verfügbar halten und nicht irgendwie nach zwei Wochen wieder löschen, dann ist das im Grunde ja eine ähnliche Diskussion. Das wir als Gemeinschaft finanzieren, Und wir wollen dann eigentlich auch die Früchte ernten und den Nutzen davon tragen. Warum ist das denn so ein Problem, wenn es um Software geht? Warum geht da die Entwicklung so langsam voran?


Das ist eine interessante Frage. Also ich glaube, ein Aspekt ist das, was ich vorhin auch schon erwähnt habe, dass die Regeln für Software eigentlich künstlicher sind, die wir uns gegeben haben. Da gibt es jetzt nicht diese natürliche Grundlage, wo man sagen kann, okay, hier beim Brot irgendwie ist es klar, wie ich damit umgehen muss, weil das kann ich so oder so backen und dann kann ich so oder so essen, aber da hat der Mensch jetzt keinen Einfluss drauf irgendwie, ob ich jetzt ein Brot einmal oder zweimal essen kann.


Aber bei so digitalen Kulturgütern ist es ja auch so.


Genau. Und die Diskussion ist da durchaus auch ähnlich. Und da gibt es ja auch tatsächlich unterschiedliche Richtungen, in die man dann sich bewegen kann. Was bei Software im Gegensatz jetzt zu Kunst oder so dazu kommt, ist, dass halt der wirtschaftliche Hebel enorm ist. Und das ist halt einfach ein essentieller Bestandteil von ja, unserem Wirtschaftssystem ist, von wie Firmen operieren und so weiter und da natürlich auch sehr viel Geschäft irgendwie dahinter steckt. Kann bei Kunst auch der Fall sein, aber das konzentriert sich da vielleicht dann eher auf relativ wenige. Im Vergleich, weil ich nicht weiß, ob die Aussage wirklich stimmt, muss man mal nachrechnen.


Da habe ich jetzt auch gerade drüber nachgedacht, wie so ist, was so für Geld im Spiel ist, wenn es um Medien und um Kultur und so geht. Boah, ja, weiß ich nicht.


Ja, es ist eine ganz interessante Frage, wenn ich so darüber nachdenke. Ich meine, wenn man sich anschaut, die größten Firmen der Welt sind im Prinzip Softwarefirmen, für die alle inzwischen Open Source eine ganz wichtige Komponente ist. Also Google, Facebook, Apple, Amazon, die würden alle ohne Open Source Software nicht existieren. Die könnten ihr Geschäftsmodell gar nicht wirtschaftlich betreiben. Und da ist ein unglaublich langer Hebel drin, den Open-Source-Software tatsächlich ermöglicht, dass ich solche gigantischen Infrastrukturen aufbauen kann, die ich für so global operierende Unternehmen und gerade so globale Services wie Facebook zum Beispiel ist, wenn ich da jetzt Lizenzgebühren irgendwie zahlen müsste für jede Zeile Code, die ich irgendwo deploye, dann könnte man sowas überhaupt nicht finanzieren. Also da spielt Open-Source-Software schon eine ganz große Rolle. Und da steckt natürlich ganz viel dahinter. Aber wenn man jetzt auch in andere Industrien guckt, also wenn man jetzt so die Computerspiele-Industrie anschaut, da ist natürlich auch unheimlich viel Geld drin. Und da ist dann auch eine interessante Frage, wie viel Open-Source-Software in so was drinsteckt. Also die Industrie ist sicher nicht der Vorreiter von Open-Source, aber auch da gibt es ja inzwischen interessante Entwicklungen. Gerade kürzlich hat sich ja irgendwie so eine Software-Foundation gegründet, Gaming-Engine, dann auch als Open-Source-Software, dann Hosted. Also auch da gibt es Tendenzen, weil auch dieses Modell von Open-Source-Software ist halt auch super modular. Das ist, glaube ich, auch so das, was diesen Hebel so groß macht, dass halt die Software aufeinander aufbaut. Wenn ich jetzt, wenn fünf Firmen einen komplizierten Stack jeweils von Grund aufbauen, dann ist es halt deutlich teurer und aufwendiger, als wenn sie sich irgendwie 80 Prozent gemeinsam aufbauen und dann ihre Ressourcen in die letzten 20 Prozent stecken und vielleicht jetzt nicht über die Gaming-Engine konkurrieren, sondern vielleicht über die Inhalte von einem tollen Spiel.


Ja spannend, spannend. An der Ecke habe ich auch gar nicht drüber nachgedacht, aber ich nick jetzt hier gerade ganz fleißig, da hast du natürlich vollkommen recht. Gaming Engine ist ein gutes Beispiel. Und jetzt gerade, als du darüber gesprochen hast, wie die großen Firmen ja im Grunde alles Softwarefirmen sind, da frage ich mich auch, Welche Macht denn hat Open Software zur Demokratisierung beizutragen? Also die Software steht ja im Grunde allen Ländern, allen Firmen, allen Menschen dann zur Verfügung. Und muss es dann eigentlich nicht zwangsläufig sein, dass diese großen Softwarefirmen aus Industriestaaten kommen, sondern die können ja auch dann an ganz anderen Ecken entstehen im Grunde. Ich weiß gar nicht, wie meine Frage an der Stelle lautet, aber wie schätzt du diesen Gedanken ein? Wie politisch ist Open Source an der Stelle?


Ja, das ... Ich glaube, Open Source ist tatsächlich durchaus politisch. Was Interessante ist gerade an dieser Frage, wenn alle Open Source Software einsetzen, ist es eigentlich eine Demokratisierung, die da stattfindet. Da kommen wir zu dem Thema vorhin zurück, der Unterschied zwischen Software as a Service und Support für Software, die ich selber laufen lassen kann. Das ist auch ein bisschen eine Tragödie, ist vielleicht zu stark gesagt, aber schon so was, was man schon mit Sorgen auch betrachten kann, dass der Open-Source-Gedanke an der Stelle ein bisschen zusammenbricht. Dieses Modell, dass wenn ich selber Software einsetze, dass ich dann diese ganzen Freiheiten damit bekomme, wenn ich Open-Source-Lizenzen habe und Open-Source-Software einsetze, dass ich selber irgendwie sie benutzen kann, sie verändern kann, sie weitergeben kann, die Änderung weitergeben kann und so weiter. Diese ganzen Freiheiten bei Software as a Service hat die nicht mehr der Nutzer, sondern hat die Firma, die die Software betreibt. Das heißt, die Freiheiten kommen bei Google und bei Facebook und bei Amazon und so weiter an, aber nicht automatisch bei den Nutzern von den Services, die diese Firmen betreiben. Und es gibt da natürlich auch Versuche irgendwie Lizenzen irgendwie so zu schreiben, dass sowas möglich ist. Aber faktisch muss man sagen, es bricht da ein bisschen das Freiheitsmodell zusammen, weil die Leistung der Firma jetzt nicht mehr in der Software liegt, sondern in diesem Service. ... da verschwinden dann plötzlich ganz viele Rechte. Also dann bin ich dann plötzlich dem Betreiber des Services ausgeliefert, ... ... dann kommen diese ganzen Fragen wie, ... ... was passiert eigentlich mit meinen Daten da zum Tragen. Und wenn man dann da tiefer reindenkt und so sagt, ... ... okay, ja eigentlich, ... ... wir haben ja die Freiheiten und die sind verstanden und so weiter, ... ... dann erweitern wir die doch einfach und ... gucken, dass wir die auch in so einer Situation irgendwie zuverlässig auch dem Nutzer und wirklich den Endanwendern dann zur Verfügung stellen. Aber da kommt man da ganz schnell in eine Ecke, wo man sagt, okay, das funktioniert nicht, das geht eigentlich gar nicht. Also da habe ich dann plötzlich Interessenkonflikte. Wenn ich einen Service nutze irgendwie, wenn ich die Software selber betreibe, dann habe ich die komplette Kontrolle. Dann kann ich alles sehen und will das auch. Und das Recht, dass ich alles angucken kann, alles verändern kann, ist total gut. Auf einem Server, wenn ich jetzt einen Service benutze, da bin ich heilfroh, dass nicht jeder Benutzer irgendwie Facebook und Google ändern kann und da seine eigene Änderung machen kann, sondern es ist ganz gut, dass die Sachen dann auch geschützt sind. Aber die Freiheit geht mir natürlich trotzdem abhanden. Das ist, glaube ich, auch so eine von den Diskussionen, die in der Open-Source-Community gar nicht ausreichend geführt werden. Ich glaube, dass wir ganz stark in so ein pragmatisches Fahrwasser gekommen sind, wo wir Open-Source-Software einsetzen. Gerade viele Firmen profitieren natürlich da auch extrem davon, was auch gut so ist, was ich auch gar nicht irgendwie verhindern wollen würde. Aber ob die wirklich diese vier Freiheiten, die wir vorhin besprochen haben, dann bei den Menschen tatsächlich ankommen, diese Frage, die müsste man eigentlich noch mit größerer Vehemenz diskutieren, weil da hängt dann viel mehr Demokratisierung dran als jetzt an der Software selbst.


Vielleicht mal noch ein bisschen den Blick weiten. Was passiert denn so links und rechts von Open Source? Diese Idee von offenem Zugang zu Dingen, die ist ja nicht auf Software beschränkt. Die ist ja bei Wissen zum Beispiel ganz stark, die ist bei Bildung irgendwie in den letzten Jahren immer mehr auch, ist die Forderung immer lauter geworden. Hast du dann ein Gespür dafür, was da links rechts so noch passiert?


Ja, das ergibt sich natürlich irgendwie, wenn man sich mit dem Thema beschäftigt, dass man da auch rechts und links schaut. Ich finde es auch immer ganz interessant, diesen Offenheitsgedanken mal zu erweitern und auf andere Bereiche anzulegen. Und wir haben das in ein paar Bereichen schon angesprochen. Es gibt diesen starken Open-Data-Bereich, wo auch ganz viel passiert, wo dann auch die Fragestellungen aber teilweise sich so ein bisschen verändern. Und also gerade bei Daten zum Beispiel stellt sich dann halt auch die Frage dann zum Beispiel nach persönlichen Daten und wo ich dann ... Offenheit schon möchte, aber nicht überall, was jetzt anders ist als bei bei Southcourt bei Southcourt. Da gibt's irgendwie, da muss man weniger differenziert in dieser Beziehung draufschauen. Und. Was ich total interessant finde, ist, wenn man ein bisschen abstrakter darüber nachdenkt, dass so diese Kultur, die aus der Open-Source-Community kommt oder die sich dort entwickelt hat, dass, glaube ich, ganz viel von dieser Kultur, die jetzt gar nicht unbedingt am konkreten Gegenstand, an dem man arbeitet und ob das jetzt Software oder Daten oder Inhalte sind oder Hardware oder sonst irgendwas. Das hängt, glaube ich, gar nicht so arg da dran. Aber so diese Kultur, das Zusammen etwas machen, selbstbestimmt arbeiten, auf Augenhöhe agieren, selber machen können und sich da engagieren, diese Kultur ist schon unheimlich stark. Und ich glaube, die lässt sich tatsächlich auch in viele Bereiche übertragen. Und da sehe ich auch, Ja ganz viel also das macht mir tatsächlich Spaß wenn wenn ich, wenn ich so gerade wenn ich mit Leuten die zusammenarbeite irgendwie die ich noch nicht kenne oder so und ich stelle dann da so eine Resonanz fest und ich weiß dann okay die die haben hier so den den den vibe das, wir machen jetzt zusammen irgendwie was cooles und machen dann auch einfach und können das auch und, Wir lassen uns da auch nicht aufhalten und wir warten jetzt nicht irgendwie auf die große Planung oder die Entscheidung des Oberchefs, der mir Anweisungen gibt, was zu tun, sondern dieses selbstbestimmte Arbeiten, dieses aus seiner eigenen Autonomie heraus Arbeiten, seine Fähigkeiten da einsetzen, auch mit einem Sinn in dem, was man tut, zu arbeiten. Das ist, glaube ich, das, was sich wirklich übertragen lässt. Und da würde ich mir auch einfach noch mehr davon wünschen. Ich glaube, das kann ganz vielen Bereichen nur guttun, diese Kultur da auch erwerben, erproben, erlernen, weiterverbreiten und in Bereichen vielleicht diese Begeisterung und positive Energie, die man in vielen Open-Source-Communities finden kann, dort auch dann vielleicht wiederfinden kann in anderen Bereichen.


Ich könnte kaum mehr einer Meinung sein mit dir. Das ist aber tatsächlich ein Groschen, der bei mir erst im Laufe des letzten Jahres irgendwann gefallen ist. So dass diese ganzen Ideen und diese ganze Macht und diese ganze Power, die da dahinter steckt, dass die ja nicht auf Software beschränkt bleiben muss. Und dass man ja das wirklich auch auf meine Heimat sind. Texte zum Beispiel. Ich kann das auch auf Texte anwenden. Ich kann das auch auf auf andere Inhalte anwenden und das finde ich, also das ist gerade so in mir gereift erst, ganz frisch, diese Erkenntnis und dann ist mir klar geworden, naja, klar, so komme ich auch in Open-Source-Projekte rein und jetzt schreibe ich eine Dokumentation für die Podcast-Software, mit der wir gerade aufnehmen, schreibe ich in einem Open-Source-Projekt an der Dokumentation mit. So, obwohl ich gar nicht programmieren kann, bin ich jetzt Teil von so einem Open-Source-Projekt geworden und da wäre ich gar nicht auf die Idee gekommen vor einem Jahr, dass sowas überhaupt geht. Also Open Source hat auf jeden Fall viel mit Faszination und viel mit Begeisterung zu tun. Und auch wenn bei den Menschen die Gründe oft unterschiedlich sind, warum sie sich in irgendwas hineinwagen und sich da auch irgendwie dann verwirklichen wollen. Kann ich jetzt, glaube ich, für mich hier das Resümee ziehen. Open Source ist auf jeden Fall, es lohnt sich auf jeden Fall, sich damit auseinanderzusetzen und sich da auch einzubringen. Das ist nicht ein komplett altruistisches Modell, wo ich einfach nur Zeit versenke, um Gutes zu tun. sondern das kann auch wirklich meine Karriere beflügeln und kann auch sich auf die eine oder andere Weise am Ende für mich persönlich auch wieder auszahlen.


Faszinierend tut mich, dass auch mehr oder weniger so die ganze Welt drauf schaut. Also auch wenn man jetzt in unserer Branche schaut, wie wir arbeiten. Wir arbeiten mit Git, das aus der Open Source Welt kommt und eigentlich auch dafür zugeschnitten ist, dass Leute auf der ganzen Welt an einem an einer einzelnen Codebase arbeiten und das sickert auch immer wieder so in die Firmen durch. Also man merkt, alle schauen da drauf und versuchen sich auch so ein bisschen daran auszurichten und das fasziniert mich. Man kann so viel erfahren sammeln. Man hat mit Leuten aus der ganzen Welt zu tun. Jeder weiß was anderes noch und meistens sind diese Open Source Projekte wirklich technologisch schon oder so wie sie umgesetzt werden, sind sie schon ziemlich gut gemacht und weit voraus. Da kann man sehr, sehr viel mitnehmen.


Okay, jetzt ist dann wirklich Zeit, das Ende einzuleiten. Wir hatten fest, Deutschland steht gar nicht so schlecht da, wenn es um das Thema Open Source geht. Ja, das könnte in der Politik noch ein bisschen vehementer vorangetrieben werden, die Initiative Public Money, Public Code. Lasse ich euch einen Link in den Show Notes, da kann man einen auf einem Brief unterschreiben für eine Petition. Das ist ein Thema, da kann man auf jeden Fall noch viel mehr machen, aber gerade in der Wirtschaft und gerade von den, es ist vielleicht nennt man es eine Grassroot-Bewegung, ja, also ist von unten heraus getragen, die Idee, dass der freien Software und der Community, da funktioniert es auf jeden Fall an der Stelle. Und da funktioniert es auch, wenn es kommerziell wird. Und das ist wirklich ganz spannend, das zu beobachten.


Sehr geehrte Podcast-Hörerin, sehr geehrter Podcast-Hörer, Hiermit bewerben wir uns als dein nächster Arbeitgeber.


Ja, ich weiß schon, dass das normalerweise andersrum läuft, aber ich finde, dass sich Unternehmen heutzutage durchaus etwas reinhängen müssen, wenn es um neue Mitarbeitende geht. Falls du also Scrum Master bist oder viel Erfahrung hast mit Fullstack, Backend oder Frontend Entwicklung, dann freue ich mich über eine kurze Nachricht an jobs at branded.dev und dann schicke ich super gerne unsere Bewerbungsunterlagen einschließlich Anschreiben, Lebenslauf und Fotos zu dir. Bis hoffentlich bald und mit den allerbesten Grüßen von deinen neuen Kolleginnen und Kollegen von Branded. Und wir haben jetzt auch schon viele Wege gehört, wie man dann da einsteigen kann, wenn man jetzt nach dieser Podcast-Episode irgendwie Bock hat, sich an einem Open-Source-Projekt zu beteiligen. Aber ich lasse mir natürlich nicht die Chance nehmen, jemanden hier mit, ich weiß nicht, 30 Jahren Open-Source-Erfahrung nach einem guten Tipp für den Einstieg zu fragen.


Also jetzt wirklich auf Software bezogen. Ich glaube, was immer gut ist, sich anzuschauen, was man selber so benutzt. Da wird man sicher irgendwo was finden, wo man sich beteiligen kann, wo vielleicht irgendwo eine Open-Source-Komponente ist oder wo vielleicht, muss ja auch gar nicht unbedingt Software sein, Wenn man jetzt irgendwie Wikipedia-Artikel irgendwie gerne liest, auch da kann man beitragen. Also ich glaube, dieser Startpunkt bei dem, was man selbst benutzt, es gibt diesen schönen Spruch von scratching your own itch, also wenn es einen selber juckt irgendwie, dann kratzt man erst mal da. Und das ist, glaube ich, ein ganz guter Einstiegspunkt. Und dann kann man gucken, viele Open-Source-Projekte sind da inzwischen auch unheimlich ausgefeilt in dem, was sie an Hilfe für Leute anbieten, die da Interesse haben, vielleicht sich selbst zu beteiligen. Da gibt's dann Dokumentation, da gibt's dann Mentoren, die einem helfen können. Auch von der Technik her ist das alles viel, viel zugänglicher geworden, in der Zeit war, als ich angefangen habe, dass man da jetzt auch gar keine so wahnsinnig großen technischen Voraussetzungen braucht, sondern da auch doch relativ schnell reinkommen kann und da lernen kann. Also das wäre so mein Tipp oder mein Rat irgendwie für jemand, der vielleicht einfach Lust hat, mal so dieses Ja gefühl zu spüren wie das ist wenn man tatsächlich selber hand anlegen kann und wie dann plötzlich irgendwie dinge da passieren wo man wirklich einfach machen kann und die hürden ganz ganz niedrig sind wenn man dieses gefühl haben möchte dann dort anfangen bei dem was man selber irgendwie cool findet wo man vielleicht selber auch eine beziehung hat was man selber benutzt und mal gucken ob es da möglichkeiten gibt sich zu beteiligen und ja in vielen fällen finden sich dann da Ja, ganz gute Wege. Manchmal sind die Wege dann auch steinig, aber auch das kann ja durchaus befriedigend sein, wenn man da so eine Herausforderung dann überwindet und irgendwo vielleicht reinkommt, wo es nicht ganz so einfach war.


Ja, genau. Aus einer großen Begeisterung heraus oder eben aus einer großen Not heraus vielleicht irgendwie was lösen oder sich irgendwo einklinken. Finde ich super.


Woran erkennst du einen extrovertierten IT-Administrator?


Daran, dass er dir auf die Schuhe blickt, wenn er mit dir redet.